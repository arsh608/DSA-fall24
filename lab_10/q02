#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void insertToMinHeap(priority_queue<int, vector<int>, greater<int>>& minHeap, int value, int k) {
    minHeap.push(value);
    if (minHeap.size() > k) {
        minHeap.pop();
    }
}

vector<int> extractMinHeap(priority_queue<int, vector<int>, greater<int>>& minHeap) {
    vector<int> result;
    while (!minHeap.empty()) {
        result.push_back(minHeap.top());
        minHeap.pop();
    }
    return result;
}

vector<int> kLargestElements(vector<int>& nums, int k) {
    priority_queue<int, vector<int>, greater<int>> minHeap;

    for (int num : nums) {
        insertToMinHeap(minHeap, num, k);
    }

    return extractMinHeap(minHeap);
}

int main() {
    vector<int> nums = {3, 2, 1, 5, 6, 4};
    int k = 3;
    vector<int> result = kLargestElements(nums, k);

    cout << "K Largest Elements: ";
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}